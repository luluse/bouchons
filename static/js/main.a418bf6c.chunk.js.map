{"version":3,"sources":["components/Post.js","App.js","components/PostForm.js","components/NewPost.js","components/EditPost.js","index.js"],"names":["DELETE_POST","gql","Post","post","refetch","useMutation","onCompleted","deletePost","className","id","title","body","createdAt","to","onClick","window","confirm","variables","Title","styled","h2","Button","button","Header","div","Empty","GET_POSTS","App","useQuery","fetchPolicy","loading","data","console","log","posts","length","map","classes","PostForm","onSave","error","React","useState","setTitle","setBody","onSubmit","event","preventDefault","required","name","placeholder","onChange","target","value","defaultValue","disabled","type","message","CREATE_POST","NewPost","history","useHistory","push","createPost","GET_POST","UPDATE_POST","EditPost","useParams","updatePost","loading2","posts_by_pk","client","ApolloClient","uri","rootElement","document","getElementById","ReactDOM","render","StrictMode","exact","path","component"],"mappings":"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","file":"static/js/main.a418bf6c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { gql } from 'apollo-boost';\nimport { useMutation } from '@apollo/react-hooks'\nimport './post.css'\n\n// const classes = {\n//   container: \"bg-white border rounded-lg overflow-hidden\",\n//   tr: \"odd:bg-gray-100 even:bg-white border-t\",\n//   td: \"font-semibold p-3 text-right md:w-1/5\",\n//   edit:\n//     \"text-xs bg-blue-600 text-white hover:bg-blue-700 rounded px-4 py-2 uppercase font-semibold tracking-wide\",\n//   delete:\n//     \"text-xs bg-red-600 text-white hover:bg-red-700 rounded px-4 py-2 uppercase font-semibold tracking-wide\",\n//   li: \"inline-block ml-2\",\n//   nav: \"my-4 mx-2 text-center\"\n// };\n\nconst DELETE_POST = gql`\nmutation DeletePost($id: uuid!) {\n  delete_posts(where: {id: {_eq: $id}}) {\n    affected_rows\n  }\n}\n`\n\nfunction Post( { post, refetch }) {\n\n  const [deletePost] = useMutation(DELETE_POST, {\n    onCompleted:() => refetch()\n  });\n\n  function handleDeletePost(id){\n    if (window.confirm(\"Are you sure you want to delete this post?\"))\n    deletePost({ variables: {id}})\n  }\n\n  return (\n    <>\n      <div className=\"container\">\n        <table className=\"w-full text-sm\">\n          <tbody>\n            <tr className=\"tr\">\n              <td className=\"td\">id</td>\n              <td className=\"p-3\">{post.id}</td>\n            </tr>\n            <tr className=\"tr\">\n              <td className=\"td\">title</td>\n              <td className=\"p-3\">{post.title}</td>\n            </tr>\n            <tr className=\"tr\">\n              <td className=\"td\">body</td>\n              <td className=\"p-3\">{post.body}</td>\n            </tr>\n            <tr className=\"tr\">\n              <td className=\"td\">createdAt</td>\n              <td className=\"p-3\">{post.createdAt}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <nav className=\"nav\">\n        <ul>\n          <li className=\"li\">\n            <Link to={`/edit/${post.id}`} className=\"edit\">\n              Edit\n            </Link>\n          </li>\n          <li className=\"li\">\n            <button onClick={() => handleDeletePost(post.id)} className=\"delete\">Delete</button>\n          </li>\n        </ul>\n      </nav>\n    </>\n  );\n}\n\nexport default Post;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { gql } from 'apollo-boost'\nimport { useQuery } from '@apollo/react-hooks'\nimport Post from './components/Post'\nimport styled from 'styled-components'\n\n\nconst Title = styled.h2`\nfont-weight: bold;\ncolor: #fff; \njustify-self: start;\nalign-self: center;\n`\n\nconst Button = styled.button`\njustify-self: end;\nalign-self: center;\nfont-size: 20px;\ntransition: 1s;\nbackground: #222;\ntransition: #EE3769 0.5s 0.3s ease-out;\nborder: none;\n\na{\n  padding: 10px 30px;\n  border-radius: 30px;\n  border: solid 1px #EE3769;\n  color: #EE3769;\n  text-decoration: none;\n\n  &:hover {\n    color: #fff;\n    border: solid 1px #fff;\n    }\n  }\n  \n&:hover{\n  transform: translateY(-3px);\n}\n`\n\nconst Header = styled.div`\ndisplay: grid;\ngrid-template-columns: repeat(2, 1fr);\ngrid-gap: 20px;\npadding: 10px 20px;\nbackground: #222;\n`\n\n\nfunction Empty() {\n  return (\n    <div className=\"text-center\">\n      {\"No posts yet. \"}\n      <Link to=\"/new\">\n        Create one?\n      </Link>\n    </div>\n  );\n}\n\nconst GET_POSTS = gql`{\n      posts {\n          id\n          body\n          title\n          createdAt\n          }\n        }\n`\n\n\nfunction App() {\n\n  const { loading, data, refetch } = useQuery(GET_POSTS, {\n    fetchPolicy: 'network-only'\n  });\n\n  if (loading) return <div>Loading...</div>;\n  console.log(data)\n\n  return (\n    <>\n      <Header >\n        <Title>All Posts</Title>\n        <Button>\n          <Link to=\"/new\" >\n            New Post\n        </Link></Button>\n      </Header>\n      {data.posts.length === 0 && <Empty />}\n      {data.posts.map(post => (\n        < Post key={post.id} post={post} refetch={refetch} />\n      ))}\n\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\nconst classes = {\n  container: \"w-full max-w-md\",\n  label: \"text-sm block font-bold  pb-2\",\n  input:\n    \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border-blue-300\",\n  button:\n    \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\",\n  form: \"px-8 py-8 pt-8\",\n  div: \"px-4 pb-4\",\n  error: \"font-bold text-red-500\"\n};\n\nfunction PostForm({ onSave, post, loading, error }) {\n  \n  const[title, setTitle] = React.useState(post?.title);\n  const[body, setBody] = React.useState(post?.body)\n\n  function onSubmit(event){\n    event.preventDefault();\n    onSave({ title, body })\n  }\n\n  return (\n    <div className={classes.container}>\n      <form onSubmit={onSubmit} className={classes.form}>\n        <div className={classes.div}>\n          <label className={classes.label}>Title</label>\n          <input\n            required\n            name=\"title\"\n            placeholder=\"Enter your post title\"\n            className={classes.input}\n            onChange={event => setTitle(event.target.value)}\n            defaultValue={title}\n          />\n        </div>\n        <div className={classes.div}>\n          <label className={classes.label}>Body</label>\n          <textarea\n            required\n            name=\"body\"\n            className={classes.input}\n            placeholder=\"Enter your post content\"\n            onChange={event => setBody(event.target.value)}\n            defaultValue={body}\n          />\n        </div>\n        <div>\n          <button \n          disabled={loading} \n          className={classes.button} \n          type=\"submit\">\n            Submit\n          </button>\n        </div>\n        {error &&  <p className={classes.error}>{error.message}</p>}\n      </form>\n    </div>\n  );\n}\n\nexport default PostForm;\n","import React from \"react\";\nimport PostForm from \"./PostForm\";\nimport { gql } from 'apollo-boost';\nimport { useHistory } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks'\n\nconst CREATE_POST = gql`\nmutation CreatePost($title: String!, $body: String!) {\n  insert_posts(objects: {body: $body, title: $title}) {\n    affected_rows\n  }\n}\n`\n\nfunction NewPost() {\n  const history = useHistory() \n  const [createPost, {loading, error}] = useMutation(CREATE_POST, {onCompleted: () => history.push('/')})\n\n  function onSave({ title, body }) {\n    createPost({ variables: { title, body }});\n  }\n\n  return (\n    <div className=\"bg-white border rounded-lg overflow-hidden\">\n      <header className=\"bg-gray-300 text-gray-700 py-3 px-4\">\n        <h2 className=\"text-sm font-semibold\">New Post</h2>\n      </header>\n      <div className=\"bg-gray-100 p-4\">\n        <PostForm onSave={onSave} loading={loading} error={error}/>\n      </div>\n    </div>\n  );\n}\n\nexport default NewPost;\n","import React from \"react\";\nimport { useParams} from \"react-router\";\nimport { gql } from 'apollo-boost';\nimport { useQuery, useMutation } from '@apollo/react-hooks'\nimport PostForm from \"./PostForm\";\nimport { useHistory } from \"react-router-dom\";\n\n\nconst classes = {\n  div: \"bg-white border rounded-lg overflow-hidden\",\n  header: \"bg-gray-300 text-gray-700 py-3 px-4\",\n  h2: \"text-sm font-semibold\"\n};\n const GET_POST = gql`\n query GetPosts($id: uuid!) {\n  posts_by_pk(id: $id) {\n    body\n    createdAt\n    id\n    title\n  }\n}`\n\nconst UPDATE_POST = gql`\nmutation UpdatePost($id: uuid!, $body: String!, $title: String!) {\n  update_posts(where: {id: {_eq: $id}}, _set: {body: $body, title: $title}) {\n    returning {\n      title\n      body\n    }\n  }\n}\n`\n\n\nfunction EditPost() {\n  const history = useHistory();\n  const { id } = useParams();\n  const {loading, data} = useQuery(GET_POST, {variables: { id }});\n  const [updatePost, { loading: loading2, error }] = useMutation(UPDATE_POST, {onCompleted: () => history.push('/')})\n\n  if (loading) return <div>Loading...</div>;\n \n\n  function onSave({title, body}) {\n    updatePost({variables: {title, body, id} });\n  }\n\n  return (\n    <div className={classes.div}>\n      <header className={classes.header}>\n        <h2 className={classes.h2}>Edit Post</h2>\n      </header>\n      <PostForm post= {data.posts_by_pk} onSave={onSave} loading={loading2} error={error}/>\n    </div>\n  );\n}\n\nexport default EditPost;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\nimport App from \"./App\";\nimport NewPost from \"./components/NewPost\";\nimport EditPost from \"./components/EditPost\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nconst client = new ApolloClient({\n  uri: \"https://bouchons.herokuapp.com/v1/graphql\"\n});\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={App} />\n          <Route exact path=\"/new\" component={NewPost} />\n          <Route exact path=\"/edit/:id\" component={EditPost} />\n        </Switch>\n      </BrowserRouter>\n    </ApolloProvider>\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}